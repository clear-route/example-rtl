name: developer-hub-cd

on:
  push:
    branches:
      - main
      
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - uses: actions/setup-node@v3
        with:
          node-version: '16'

      - uses: borales/actions-yarn@v3.0.0
        with:
          cmd: install

      - uses: borales/actions-yarn@v3.0.0
        with:
          cmd: test

  build-push-deploy:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - uses: borales/actions-yarn@v3.0.0
        with:
          cmd: install 


      - uses: borales/actions-yarn@v3.0.0
        with:
          cmd: build

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY}}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          yarn build-image
          docker tag backstage:latest $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: backstage-fargate-task.json
          container-name: clear-route-backstage
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: backstage-service
          cluster: backstage
          wait-for-service-stability: true

      - name: Publish Latest Tech Docs
        id: publish-docs
        run: |
          npm install -g @techdocs/cli
          pip install mkdocs-techdocs-core==1.*
          npx techdocs-cli generate --no-docker
          npx techdocs-cli publish --publisher-type awsS3 --storage-name developer-hub-tech-docs --entity default/Component/docs